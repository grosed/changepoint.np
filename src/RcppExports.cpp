// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// NUNCstepGlobal
List NUNCstepGlobal(std::vector<double>& data, List pastInfo, const double threshold, const std::vector<double> quantiles);
RcppExport SEXP _changepoint_np_NUNCstepGlobal(SEXP dataSEXP, SEXP pastInfoSEXP, SEXP thresholdSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type pastInfo(pastInfoSEXP);
    Rcpp::traits::input_parameter< const double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(NUNCstepGlobal(data, pastInfo, threshold, quantiles));
    return rcpp_result_gen;
END_RCPP
}
// NUNCstepLocal
long long NUNCstepLocal(std::vector<double>& data, const double threshold, const std::vector<double> quantiles, const std::vector<long>& grid);
RcppExport SEXP _changepoint_np_NUNCstepLocal(SEXP dataSEXP, SEXP thresholdSEXP, SEXP quantilesSEXP, SEXP gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type grid(gridSEXP);
    rcpp_result_gen = Rcpp::wrap(NUNCstepLocal(data, threshold, quantiles, grid));
    return rcpp_result_gen;
END_RCPP
}
// NUNCGlobal
List NUNCGlobal(Rcpp::Function dataGen, const long w, const double beta, const long K);
RcppExport SEXP _changepoint_np_NUNCGlobal(SEXP dataGenSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type dataGen(dataGenSEXP);
    Rcpp::traits::input_parameter< const long >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const long >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(NUNCGlobal(dataGen, w, beta, K));
    return rcpp_result_gen;
END_RCPP
}
// NUNCLocal
List NUNCLocal(Rcpp::Function dataGen, const long w, const double beta, const long K, const std::vector<long>& grid);
RcppExport SEXP _changepoint_np_NUNCLocal(SEXP dataGenSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP KSEXP, SEXP gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type dataGen(dataGenSEXP);
    Rcpp::traits::input_parameter< const long >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const long >::type K(KSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type grid(gridSEXP);
    rcpp_result_gen = Rcpp::wrap(NUNCLocal(dataGen, w, beta, K, grid));
    return rcpp_result_gen;
END_RCPP
}
// NUNCSemiParametric
List NUNCSemiParametric(Rcpp::Function dataGen, const long w, const double beta, std::vector<double> quantiles);
RcppExport SEXP _changepoint_np_NUNCSemiParametric(SEXP dataGenSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type dataGen(dataGenSEXP);
    Rcpp::traits::input_parameter< const long >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(NUNCSemiParametric(dataGen, w, beta, quantiles));
    return rcpp_result_gen;
END_RCPP
}
// NUNCGlobalOffline
List NUNCGlobalOffline(std::vector<double>& data, const long w, const double beta, const long K);
RcppExport SEXP _changepoint_np_NUNCGlobalOffline(SEXP dataSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const long >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const long >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(NUNCGlobalOffline(data, w, beta, K));
    return rcpp_result_gen;
END_RCPP
}
// NUNCLocalOffline
List NUNCLocalOffline(std::vector<double>& data, const long w, const double beta, const long K, const std::vector<long>& grid);
RcppExport SEXP _changepoint_np_NUNCLocalOffline(SEXP dataSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP KSEXP, SEXP gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const long >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const long >::type K(KSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type grid(gridSEXP);
    rcpp_result_gen = Rcpp::wrap(NUNCLocalOffline(data, w, beta, K, grid));
    return rcpp_result_gen;
END_RCPP
}
// NUNCsemiParametricOffline
List NUNCsemiParametricOffline(std::vector<double>& data, const long w, const double beta, std::vector<double> quantiles);
RcppExport SEXP _changepoint_np_NUNCsemiParametricOffline(SEXP dataSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP quantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const long >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type quantiles(quantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(NUNCsemiParametricOffline(data, w, beta, quantiles));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pelt
List rcpp_pelt(std::vector<double>& sumstats, double& beta, int& nquantiles);
RcppExport SEXP _changepoint_np_rcpp_pelt(SEXP sumstatsSEXP, SEXP betaSEXP, SEXP nquantilesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type sumstats(sumstatsSEXP);
    Rcpp::traits::input_parameter< double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int& >::type nquantiles(nquantilesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pelt(sumstats, beta, nquantiles));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_changepoint_np_NUNCstepGlobal", (DL_FUNC) &_changepoint_np_NUNCstepGlobal, 4},
    {"_changepoint_np_NUNCstepLocal", (DL_FUNC) &_changepoint_np_NUNCstepLocal, 4},
    {"_changepoint_np_NUNCGlobal", (DL_FUNC) &_changepoint_np_NUNCGlobal, 4},
    {"_changepoint_np_NUNCLocal", (DL_FUNC) &_changepoint_np_NUNCLocal, 5},
    {"_changepoint_np_NUNCSemiParametric", (DL_FUNC) &_changepoint_np_NUNCSemiParametric, 4},
    {"_changepoint_np_NUNCGlobalOffline", (DL_FUNC) &_changepoint_np_NUNCGlobalOffline, 4},
    {"_changepoint_np_NUNCLocalOffline", (DL_FUNC) &_changepoint_np_NUNCLocalOffline, 5},
    {"_changepoint_np_NUNCsemiParametricOffline", (DL_FUNC) &_changepoint_np_NUNCsemiParametricOffline, 4},
    {"_changepoint_np_rcpp_pelt", (DL_FUNC) &_changepoint_np_rcpp_pelt, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_changepoint_np(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
